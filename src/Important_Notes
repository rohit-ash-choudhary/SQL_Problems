All About All Keys
1. https://vocepergunta.com/library/artigo/read/4745-why-can-a-foreign-key-be-null#question-0
2. https://www.analyticsvidhya.com/blog/2020/07/difference-between-sql-keys-primary-key-super-key-candidate-key-foreign-key/#:~:text=What%20is%20a%20Super%20key,they%20can%20identify%20tuples%20uniquely.

1. here is a slight difference b/w delete and truncate statement. The DELETE statement only deletes the rows from the table
   based on the condition defined by WHERE clause or delete all the rows from the table when condition is not specified.
   But it does not free the space containing by the table.
   The TRUNCATE statement: it is used to delete all the rows from the table and free the containing space.

----" Truncate table is faster and uses lesser resources than DELETE TABLE command." ------
   The rollback process is not possible after truncate table statement. Once you truncate a table you cannot use a flashback
   table statement to retrieve the content of the table.
   his command does not maintain the transaction log during the execution. It deallocates the data pages instead of rows and makes an
    entry for the deallocating pages instead of rows in transaction logs. This command also locks the pages instead of rows; thus,
    it requires fewer locks and resources.

   The following points must be considered while using the TRUNCATE command:

   We cannot use the WHERE clause with this command so that filtering of records is not possible.
   We cannot rollback the deleted data after executing this command because the log is not maintained while performing this operation.
   We cannot use the truncate statement when a table is referenced by a foreign key or participates in an indexed view.
   The TRUNCATE command doesn't fire DELETE triggers associated with the table that is being truncated because it does not operate on individual rows.

   Create Table Customer
   ( Customer_id INT(10),
     Customer_name VARCHAR(15),
     CUSTOMER ADDRESS VARCHAR(25),
     CUSTOMER_EMAIL VARCHAR(25) NOT NULL FOREIGN KEY,
   )
LINK : https://www.javatpoint.com/mysql-truncate-table
   If we perform the TRUNCATE operation for the table that uses a foreign key constraint, we will get the following error:

          ERROR 1217 (23000): Cannot delete or update a parent row: a foreign key constraint fails
          In that case, we need to log into the MySQL server and disable foreign key checks before executing the TRUNCATE statement as below:

          SET FOREIGN_KEY_CHECKS=0;
          Now, we are able to truncate tables. After execution, re-enable foreign key checks as given below:

         SET FOREIGN_KEY_CHECKS=1;
   Note : We are not able to rollback the DDL command because transaction log is not maintained during execution
        of these commands.
        We cannot rollback the deleted data after executing this command because the log is not maintained while performing this operation.

2. Some statements cannot be rolled back. In general, these included data definition language (DDL) statements, such as those
   that create or drop databases, those that create, drop, or alter tables or stored routines.
   You should design your transactions not to include such statements. If you issue a statement early in a transaction that
   cannot be rolled back, and then another statement later fails, the full effect of the transaction cannot be rolled back in
   such cases by issuing a ROLLBACK statement.
  --- "When a transaction rolled back the data associated with table variable is not rolled back." ---

3. Difference b/w DROP and TRUNCATE statements
    When you use the drop statement it deletes the table's row together with the table's definition so all the relationships of
    that table with other tables will no longer be valid.

   When you drop a table:

   Table structure will be dropped
   Relationship will be dropped
   Integrity constraints will be dropped
   Access privileges will also be dropped
    On the other hand when we TRUNCATE a table, the table structure remains the same, so you will not face any of the above problems.

4. Rollback not possible after TRUNCATE & DROP a table ,because these are DDL COMMAND.

5. How Create Backup of tables :
   1. Create backup of Customer table
   Ans.
       1.  Create table Customer_backup as select * from Customers;
           or//
       2.   SELECT * INTO New_table_name FROM old_table_name;  (Test but not work need to check)

6.  Temporary tables can be created at run-time and can do all kinds of operations that a normal table can do. These temporary tables
    are created inside tempdb database.

    There are two types of temp tables based on the behavior and scope.

    Local Temp Variable
    Global Temp Variable
    Local Temp Variable
    Local temp tables are only available at current connection time. It is automatically deleted when user disconnects from instances.
    It is started with hash (#) sign.

    CREATE TABLE #local temp table (
    User id int,
    Username varchar (50),
    User address varchar (150)
    )
    Global Temp Variable
    Global temp tables name starts with double hash (##). Once this table is created, it is like a permanent table. It is always ready
    for all users and not deleted until the total connection is withdrawn.

    CREATE TABLE ##new global temp table (
    User id int,
    User name varchar (50),
    User address varchar (150)
    )

7. Comparisons between these two clauses Having & Where , but the main difference is that the WHERE clause uses condition for
   filtering records before any groupings are made, while HAVING clause uses condition for filtering values from a group.
    Having : 1 . It is a post-filter. , It is used to filter groups.
             2 . It is a pre-filter. , It is used to filter the single record of the table.

8. Query order of execution in SQL
   FROM and JOIN s. The FROM clause, and subsequent JOIN s are first executed to determine the total working set of data that is being queried. ...
   WHERE. ...
   GROUP BY. ...
   HAVING. ...
   SELECT. ...
   DISTINCT. ...
   ORDER BY. ...
   LIMIT / OFFSET
   Link : https://www.sisense.com/blog/sql-query-order-of-operations/

9. Outer join of two types:

   1.Left outer join (also known as left join): this join returns all the rows from left table combine with the matching rows of the right table.
   If you get no matching in the right table it returns NULL values.

   2.Right outer join (also known as right join): this join returns all the rows from right table are combined with the matching rows of left table .
   If you get no column matching in the left table .it returns null value.

10. The SQL full join is the result of combination of both left and right outer join and the join tables have all the records from both tables.
    It puts NULL on the place of matches not found.

11. Primary Key
    A column or columns is called primary key (PK) that uniquely identifies each row in the table.

    If you want to create a primary key, you should define a PRIMARY KEY constraint when you create or modify a table.

    When multiple columns are used as a primary key, it is known as composite primary key.

    In designing the composite primary key, you should use as few columns as possible. It is good for storage and performance both,\
    the more columns you use for primary key the more storage space you require.

    Inn terms of performance, less data means the database can process faster.

    Points to remember for primary key:
    Primary key enforces the entity integrity of the table.
    Primary key always has unique data.
    A primary key length cannot be exceeded than 900 bytes.
    A primary key cannot have null value.
    There can be no duplicate value for a primary key.
    A table can contain only one primary key constraint.
    Note : The main advantage of this uniqueness is that we get fast access.

12. Foreign Key
    In the relational databases, a foreign key is a field or a column that is used to
    establish a link between two tables.
    In simple words you can say that, a foreign key in one table used to point primary key in another
    table.

13. Composite Key
    A composite key is a combination of two or more columns in a table that can be used to uniquely identify each row
    in the table when the columns are combined uniqueness is guaranteed, but when it taken individually it does not guarantee uniqueness.
    Sometimes more than one attributes are needed to uniquely identify an entity. A primary key that is made by the
    combination of more than one attribute is known as a composite key.
     In other words we can say that:

    Composite key is a key which is the combination of more than one field or column of a given table. It may be a candidate key or primary key.

14. Unique Key
    A unique key is a set of one or more than one fields/columns of a table that uniquely identify a record in a database table.
    You can say that it is little like primary key but it can accept only one null value and it cannot have duplicate values.
    The unique key and primary key both provide a guarantee for uniqueness for a column or a set of columns.
    There is an automatically defined unique key constraint within a primary key constraint.
    There may be many unique key constraints for one table, but only one PRIMARY KEY constraint for one table.

15. Key difference between SQL Keys
    SQL keys are used to uniquely identify rows in a table.
    SQL keys can either be a single column or a group of columns.
    Super key is a single key or a group of multiple keys that can uniquely identify tuples in a table.
    Super keys can contain redundant attributes that might not be important for identifying tuples.
    Candidate keys are a subset of Super keys. They contain only those attributes which are required to uniquely identify tuples.
    All Candidate keys are Super keys. But the vice-versa is not true.
    Primary key is a Candidate key chosen to uniquely identify tuples in the table.
    Primary key values should be unique and non-null.
    There can be multiple Super keys and Candidate keys in a table, but there can be only one Primary key in a table.
    Alternate keys are those Candidate keys that were not chosen to be the Primary key of the table.
    Composite key is a Candidate key that consists of more than one attribute.
    Foreign key is an attribute which is a Primary key in its parent table but is included as an attribute in the host table.
    Foreign keys may accept non-unique and null values

16. IN vs EXITS

    The main difference between them is that IN selects a list of matching values, whereas EXISTS returns the Boolean value TRUE or FALSE
    The IN operator is used to retrieves results when the specified value matches any value in a set of values or is returned by a subquery.
    This operator allows us to specify multiple values along with the WHERE clause. It reduces the use of multiple OR conditions in SELECT, INSERT,
    UPDATE, and DELETE queries; that's why it is also called the shorthand for multiple OR conditions.

    In this operator, the inner query executes first, and the result obtained is used by the outer query to display the output. It should be
    remembered that the inner query is executed only once. The IN operator has the following syntax:

    EXISTS is a Boolean operator which checks the subquery result and returns an either TRUE or FALSE value.
    It is used in combination with subquery and checks whether a row is returned through this subquery or not. This operator returns TRUE if the
    subquery returns single or multiple records. Otherwise, it gives a FALSE result when no records are returned.

    When the EXISTS operator detects the first true event, it automatically terminates for further processing.
    This feature enhances the query's efficiency. We can use the EXISTS operator with SELECT, UPDATE, DELETE, and INSERT statements

    Key differences between IN and EXISTS Operator
    The following points explain the main differences between IN and EXISTS clause:

    The IN clause scan all records fetched from the given subquery column, whereas EXISTS clause evaluates true or false, and the SQL engine
    quits the scanning process as soon as it found a match.
    When the subquery results are large, EXISTS operator provides better performance. In contrast,
    when the sub-query results are small, the IN operator is faster than EXISTS.
    IN operator always picks the matching values list, whereas EXISTS returns the Boolean values TRUE or FALSE.
    EXISTS operator can only be used with subqueries, whereas we can use the IN operator on subqueries and values both.
    The EXISTS clause can compare everything with NULLs, while the IN clause can't compare anything with NULL.
    IN operator performs a direct match between the columns specified before the IN keyword and a subquery result.
    Conversely, EXISTS operator does not check for a match because it only verifies data existence in a subquery.

17 .GROUP BY, ORDER BY :

    GROUP BY is always placed after the WHERE clause but before the ORDER BY statement. On the other hand,
    ORDER BY is always used after the GROUP BY statement.

18. Difference between WHERE and HAVING :

    The difference between the WHERE and HAVING clause is the most common question posed during an interview time.
    The main difference between them is that the WHERE clause is used to specify a condition for filtering records
    before any groupings are made, while the HAVING clause is used to specify a condition for filtering values from a group.

    HAVING clause in MySQL used in conjunction with GROUP BY clause enables us to specify conditions that filter which group
    results appear in the result. It returns only those values from the groups in the final result that fulfills certain conditions.
    We can also use the WHERE and HAVING clause together during selection. In this case, WHERE clause first filters the individual rows,
    then rows are grouped, performs aggregate calculations, and at last HAVING clause filter the groups.

    Key Differences between WHERE and HAVING Clause
    The following points explain the main differences between database and schema:

    WHERE clause filters individual rows, whereas the HAVING clause filters groups instead of one row at a time.
    We cannot use the WHERE clause with aggregate functions because it works for filtering individual rows. In contrast, HAVING can works with
    aggregate functions because it is used to filter groups.
    Row operations are handled by the WHERE clause, while the HAVING clause handles column operations to summarized rows or groups.
    WHERE comes before GROUP BY, which means WHERE clause filter rows before performing aggregate calculations. HAVING comes after GROUP BY,
    which means the HAVING clause filters rows after performing aggregate calculations. Consequently, HAVING is slower than WHERE in terms of
    efficiency and should be avoided wherever possible.
    We can combine the WHERE and HAVING clause together in a SELECT query. In this case, the WHERE clause is used first to filter individual rows.
    The rows are then grouped, perform aggregate calculations, and finally, the HAVING clause is used to filter the groups.
    The WHERE clause retrieves the desired data based on the specified condition. On the other hand, the HAVING clause first fetches whole data,
    and then separation is done based on the specified condition.
    Without a SELECT statement, we cannot use the HAVING clause. Conversely, we can use a WHERE with SELECT, UPDATE, and DELETE statements.
    WHERE clause is a pre-filter, whereas HAVING clause is a post-filter.